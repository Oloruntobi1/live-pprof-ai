// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.3
// source: api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	KV_FullMetrics_FullMethodName        = "/server.KV/FullMetrics"
	KV_IncrementalMetrics_FullMethodName = "/server.KV/IncrementalMetrics"
)

// KVClient is the client API for KV service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KVClient interface {
	FullMetrics(ctx context.Context, in *FullMetricsRequest, opts ...grpc.CallOption) (*FullMetricsResponse, error)
	IncrementalMetrics(ctx context.Context, in *IncrementalMetricsRequest, opts ...grpc.CallOption) (KV_IncrementalMetricsClient, error)
}

type kVClient struct {
	cc grpc.ClientConnInterface
}

func NewKVClient(cc grpc.ClientConnInterface) KVClient {
	return &kVClient{cc}
}

func (c *kVClient) FullMetrics(ctx context.Context, in *FullMetricsRequest, opts ...grpc.CallOption) (*FullMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FullMetricsResponse)
	err := c.cc.Invoke(ctx, KV_FullMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kVClient) IncrementalMetrics(ctx context.Context, in *IncrementalMetricsRequest, opts ...grpc.CallOption) (KV_IncrementalMetricsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &KV_ServiceDesc.Streams[0], KV_IncrementalMetrics_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &kVIncrementalMetricsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KV_IncrementalMetricsClient interface {
	Recv() (*IncrementalMetricsStreamResponse, error)
	grpc.ClientStream
}

type kVIncrementalMetricsClient struct {
	grpc.ClientStream
}

func (x *kVIncrementalMetricsClient) Recv() (*IncrementalMetricsStreamResponse, error) {
	m := new(IncrementalMetricsStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KVServer is the server API for KV service.
// All implementations must embed UnimplementedKVServer
// for forward compatibility
type KVServer interface {
	FullMetrics(context.Context, *FullMetricsRequest) (*FullMetricsResponse, error)
	IncrementalMetrics(*IncrementalMetricsRequest, KV_IncrementalMetricsServer) error
	mustEmbedUnimplementedKVServer()
}

// UnimplementedKVServer must be embedded to have forward compatible implementations.
type UnimplementedKVServer struct {
}

func (UnimplementedKVServer) FullMetrics(context.Context, *FullMetricsRequest) (*FullMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FullMetrics not implemented")
}
func (UnimplementedKVServer) IncrementalMetrics(*IncrementalMetricsRequest, KV_IncrementalMetricsServer) error {
	return status.Errorf(codes.Unimplemented, "method IncrementalMetrics not implemented")
}
func (UnimplementedKVServer) mustEmbedUnimplementedKVServer() {}

// UnsafeKVServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KVServer will
// result in compilation errors.
type UnsafeKVServer interface {
	mustEmbedUnimplementedKVServer()
}

func RegisterKVServer(s grpc.ServiceRegistrar, srv KVServer) {
	s.RegisterService(&KV_ServiceDesc, srv)
}

func _KV_FullMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FullMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KVServer).FullMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KV_FullMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KVServer).FullMetrics(ctx, req.(*FullMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KV_IncrementalMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(IncrementalMetricsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KVServer).IncrementalMetrics(m, &kVIncrementalMetricsServer{ServerStream: stream})
}

type KV_IncrementalMetricsServer interface {
	Send(*IncrementalMetricsStreamResponse) error
	grpc.ServerStream
}

type kVIncrementalMetricsServer struct {
	grpc.ServerStream
}

func (x *kVIncrementalMetricsServer) Send(m *IncrementalMetricsStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// KV_ServiceDesc is the grpc.ServiceDesc for KV service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KV_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.KV",
	HandlerType: (*KVServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FullMetrics",
			Handler:    _KV_FullMetrics_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "IncrementalMetrics",
			Handler:       _KV_IncrementalMetrics_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}
